// Generated by gencpp from file mlog_msgs/Entry.msg
// DO NOT EDIT!


#ifndef MLOG_MSGS_MESSAGE_ENTRY_H
#define MLOG_MSGS_MESSAGE_ENTRY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mlog_msgs
{
template <class ContainerAllocator>
struct Entry_
{
  typedef Entry_<ContainerAllocator> Type;

  Entry_()
    : type(0)
    , data()  {
    }
  Entry_(const ContainerAllocator& _alloc)
    : type(0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _data_type;
  _data_type data;



  enum {
    DATA_TYPE_NORMAL = 0u,
    DATA_TYPE_MSG_TIMESTAMP = 1u,
    DATA_TYPE_MSG_RELATION = 2u,
  };


  typedef std::shared_ptr< ::mlog_msgs::Entry_<ContainerAllocator> > Ptr;
  typedef std::shared_ptr< ::mlog_msgs::Entry_<ContainerAllocator> const> ConstPtr;

}; // struct Entry_

typedef ::mlog_msgs::Entry_<std::allocator<void> > Entry;

typedef std::shared_ptr< ::mlog_msgs::Entry > EntryPtr;
typedef std::shared_ptr< ::mlog_msgs::Entry const> EntryConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mlog_msgs::Entry_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mlog_msgs::Entry_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mlog_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsMessage': True, 'IsFixedSize': False, 'HasHeader': False}
// {'sensor_msgs': ['/home/jiasibo/work/mdc/mdc_hardware/thirdparty/msd_applications/ros_msgs/genmsg/share/sensor_msgs/msg'], 'std_msgs': ['/home/jiasibo/work/mdc/mdc_hardware/thirdparty/msd_applications/ros_msgs/genmsg/share/std_msgs/msg'], 'nav_msgs': ['/home/jiasibo/work/mdc/mdc_hardware/thirdparty/msd_applications/ros_msgs/genmsg/share/nav_msgs/msg'], 'shape_msgs': ['/home/jiasibo/work/mdc/mdc_hardware/thirdparty/msd_applications/ros_msgs/genmsg/share/shape_msgs/msg'], 'geometry_msgs': ['/home/jiasibo/work/mdc/mdc_hardware/thirdparty/msd_applications/ros_msgs/genmsg/share/geometry_msgs/msg/'], 'recorder_msgs': ['../msgs/recorder_msgs/'], 'perception_interface': ['../msgs/perception_interface/'], 'param_aggregator': ['../msgs/param_aggregator/'], 'msd_worldmodel_msgs': ['../msgs/msd_worldmodel_msgs/'], 'msd_vehicle_status_msgs': ['../msgs/msd_vehicle_status_msgs/'], 'msd_planning_msgs': ['../msgs/msd_planning_msgs/'], 'msd_framework_status_msgs': ['../msgs/msd_framework_status_msgs/'], 'msd_endpoint_msgs': ['../msgs/msd_endpoint_msgs/'], 'wanshannnt_msgs': ['../msgs/wanshannnt_msgs/'], 'mlog_msgs': ['../msgs/mlog_msgs/'], 'mla_localization_msgs': ['../msgs/mla_localization_msgs/'], 'hdmap_perception_interface': ['../msgs/hdmap_perception_interface/'], 'gps_imu_msgs': ['../msgs/gps_imu_msgs/']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsMessage< ::mlog_msgs::Entry_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mlog_msgs::Entry_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mlog_msgs::Entry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mlog_msgs::Entry_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mlog_msgs::Entry_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mlog_msgs::Entry_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mlog_msgs::Entry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "76a913180710d6f3d98ec82c1323494a";
  }

  static const char* value(const ::mlog_msgs::Entry_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x76a913180710d6f3ULL;
  static const uint64_t static_value2 = 0xd98ec82c1323494aULL;
};

template<class ContainerAllocator>
struct DataType< ::mlog_msgs::Entry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mlog_msgs/Entry";
  }

  static const char* value(const ::mlog_msgs::Entry_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mlog_msgs::Entry_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# --- entry ---\n\
uint8 type\n\
string data\n\
\n\
uint8 DATA_TYPE_NORMAL = 0\n\
uint8 DATA_TYPE_MSG_TIMESTAMP = 1\n\
uint8 DATA_TYPE_MSG_RELATION = 2\n\
";
  }

  static const char* value(const ::mlog_msgs::Entry_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mlog_msgs::Entry_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Entry_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mlog_msgs::Entry_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mlog_msgs::Entry_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
    s << indent << "data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MLOG_MSGS_MESSAGE_ENTRY_H
